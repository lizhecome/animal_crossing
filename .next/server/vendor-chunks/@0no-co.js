"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@0no-co";
exports.ids = ["vendor-chunks/@0no-co"];
exports.modules = {

/***/ "(ssr)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BREAK: () => (/* binding */ c),\n/* harmony export */   GraphQLError: () => (/* binding */ GraphQLError),\n/* harmony export */   Kind: () => (/* binding */ e),\n/* harmony export */   OperationTypeNode: () => (/* binding */ r),\n/* harmony export */   Source: () => (/* binding */ Source),\n/* harmony export */   isSelectionNode: () => (/* binding */ isSelectionNode),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseType: () => (/* binding */ parseType),\n/* harmony export */   parseValue: () => (/* binding */ parseValue),\n/* harmony export */   print: () => (/* binding */ print),\n/* harmony export */   printBlockString: () => (/* binding */ printBlockString),\n/* harmony export */   printString: () => (/* binding */ printString),\n/* harmony export */   valueFromASTUntyped: () => (/* binding */ valueFromASTUntyped),\n/* harmony export */   valueFromTypeNode: () => (/* binding */ valueFromTypeNode),\n/* harmony export */   visit: () => (/* binding */ visit)\n/* harmony export */ });\nvar e = {\n  NAME: \"Name\",\n  DOCUMENT: \"Document\",\n  OPERATION_DEFINITION: \"OperationDefinition\",\n  VARIABLE_DEFINITION: \"VariableDefinition\",\n  SELECTION_SET: \"SelectionSet\",\n  FIELD: \"Field\",\n  ARGUMENT: \"Argument\",\n  FRAGMENT_SPREAD: \"FragmentSpread\",\n  INLINE_FRAGMENT: \"InlineFragment\",\n  FRAGMENT_DEFINITION: \"FragmentDefinition\",\n  VARIABLE: \"Variable\",\n  INT: \"IntValue\",\n  FLOAT: \"FloatValue\",\n  STRING: \"StringValue\",\n  BOOLEAN: \"BooleanValue\",\n  NULL: \"NullValue\",\n  ENUM: \"EnumValue\",\n  LIST: \"ListValue\",\n  OBJECT: \"ObjectValue\",\n  OBJECT_FIELD: \"ObjectField\",\n  DIRECTIVE: \"Directive\",\n  NAMED_TYPE: \"NamedType\",\n  LIST_TYPE: \"ListType\",\n  NON_NULL_TYPE: \"NonNullType\"\n};\n\nvar r = {\n  QUERY: \"query\",\n  MUTATION: \"mutation\",\n  SUBSCRIPTION: \"subscription\"\n};\n\nclass GraphQLError extends Error {\n  constructor(e, r, n, i, t, a, l) {\n    super(e);\n    this.name = \"GraphQLError\";\n    this.message = e;\n    if (t) {\n      this.path = t;\n    }\n    if (r) {\n      this.nodes = Array.isArray(r) ? r : [ r ];\n    }\n    if (n) {\n      this.source = n;\n    }\n    if (i) {\n      this.positions = i;\n    }\n    if (a) {\n      this.originalError = a;\n    }\n    var o = l;\n    if (!o && a) {\n      var u = a.extensions;\n      if (u && \"object\" == typeof u) {\n        o = u;\n      }\n    }\n    this.extensions = o || {};\n  }\n  toJSON() {\n    return {\n      ...this,\n      message: this.message\n    };\n  }\n  toString() {\n    return this.message;\n  }\n  get [Symbol.toStringTag]() {\n    return \"GraphQLError\";\n  }\n}\n\nvar n;\n\nvar i;\n\nfunction error(e) {\n  return new GraphQLError(`Syntax Error: Unexpected token at ${i} in ${e}`);\n}\n\nfunction advance(e) {\n  e.lastIndex = i;\n  if (e.test(n)) {\n    return n.slice(i, i = e.lastIndex);\n  }\n}\n\nvar t = / +(?=[^\\s])/y;\n\nfunction blockString(e) {\n  var r = e.split(\"\\n\");\n  var n = \"\";\n  var i = 0;\n  var a = 0;\n  var l = r.length - 1;\n  for (var o = 0; o < r.length; o++) {\n    t.lastIndex = 0;\n    if (t.test(r[o])) {\n      if (o && (!i || t.lastIndex < i)) {\n        i = t.lastIndex;\n      }\n      a = a || o;\n      l = o;\n    }\n  }\n  for (var u = a; u <= l; u++) {\n    if (u !== a) {\n      n += \"\\n\";\n    }\n    n += r[u].slice(i).replace(/\\\\\"\"\"/g, '\"\"\"');\n  }\n  return n;\n}\n\nfunction ignored() {\n  for (var e = 0 | n.charCodeAt(i++); 9 === e || 10 === e || 13 === e || 32 === e || 35 === e || 44 === e || 65279 === e; e = 0 | n.charCodeAt(i++)) {\n    if (35 === e) {\n      while (10 !== (e = n.charCodeAt(i++)) && 13 !== e) {}\n    }\n  }\n  i--;\n}\n\nvar a = /[_A-Za-z]\\w*/y;\n\nvar l = new RegExp(\"(?:(null|true|false)|\\\\$(\" + a.source + ')|(-?\\\\d+)((?:\\\\.\\\\d+)?[eE][+-]?\\\\d+|\\\\.\\\\d+)?|(\"\"\"(?:\"\"\"|(?:[\\\\s\\\\S]*?[^\\\\\\\\])\"\"\"))|(\"(?:\"|[^\\\\r\\\\n]*?[^\\\\\\\\]\"))|(' + a.source + \"))\", \"y\");\n\nvar o = function(e) {\n  e[e.Const = 1] = \"Const\";\n  e[e.Var = 2] = \"Var\";\n  e[e.Int = 3] = \"Int\";\n  e[e.Float = 4] = \"Float\";\n  e[e.BlockString = 5] = \"BlockString\";\n  e[e.String = 6] = \"String\";\n  e[e.Enum = 7] = \"Enum\";\n  return e;\n}(o || {});\n\nvar u = /\\\\/;\n\nfunction value(e) {\n  var r;\n  var t;\n  l.lastIndex = i;\n  if (91 === n.charCodeAt(i)) {\n    i++;\n    ignored();\n    var d = [];\n    while (93 !== n.charCodeAt(i)) {\n      d.push(value(e));\n    }\n    i++;\n    ignored();\n    return {\n      kind: \"ListValue\",\n      values: d\n    };\n  } else if (123 === n.charCodeAt(i)) {\n    i++;\n    ignored();\n    var v = [];\n    while (125 !== n.charCodeAt(i)) {\n      if (null == (r = advance(a))) {\n        throw error(\"ObjectField\");\n      }\n      ignored();\n      if (58 !== n.charCodeAt(i++)) {\n        throw error(\"ObjectField\");\n      }\n      ignored();\n      v.push({\n        kind: \"ObjectField\",\n        name: {\n          kind: \"Name\",\n          value: r\n        },\n        value: value(e)\n      });\n    }\n    i++;\n    ignored();\n    return {\n      kind: \"ObjectValue\",\n      fields: v\n    };\n  } else if (null != (t = l.exec(n))) {\n    i = l.lastIndex;\n    ignored();\n    if (null != (r = t[o.Const])) {\n      return \"null\" === r ? {\n        kind: \"NullValue\"\n      } : {\n        kind: \"BooleanValue\",\n        value: \"true\" === r\n      };\n    } else if (null != (r = t[o.Var])) {\n      if (e) {\n        throw error(\"Variable\");\n      } else {\n        return {\n          kind: \"Variable\",\n          name: {\n            kind: \"Name\",\n            value: r\n          }\n        };\n      }\n    } else if (null != (r = t[o.Int])) {\n      var s;\n      if (null != (s = t[o.Float])) {\n        return {\n          kind: \"FloatValue\",\n          value: r + s\n        };\n      } else {\n        return {\n          kind: \"IntValue\",\n          value: r\n        };\n      }\n    } else if (null != (r = t[o.BlockString])) {\n      return {\n        kind: \"StringValue\",\n        value: blockString(r.slice(3, -3)),\n        block: !0\n      };\n    } else if (null != (r = t[o.String])) {\n      return {\n        kind: \"StringValue\",\n        value: u.test(r) ? JSON.parse(r) : r.slice(1, -1),\n        block: !1\n      };\n    } else if (null != (r = t[o.Enum])) {\n      return {\n        kind: \"EnumValue\",\n        value: r\n      };\n    }\n  }\n  throw error(\"Value\");\n}\n\nfunction arguments_(e) {\n  if (40 === n.charCodeAt(i)) {\n    var r = [];\n    i++;\n    ignored();\n    var t;\n    do {\n      if (null == (t = advance(a))) {\n        throw error(\"Argument\");\n      }\n      ignored();\n      if (58 !== n.charCodeAt(i++)) {\n        throw error(\"Argument\");\n      }\n      ignored();\n      r.push({\n        kind: \"Argument\",\n        name: {\n          kind: \"Name\",\n          value: t\n        },\n        value: value(e)\n      });\n    } while (41 !== n.charCodeAt(i));\n    i++;\n    ignored();\n    return r;\n  }\n}\n\nfunction directives(e) {\n  if (64 === n.charCodeAt(i)) {\n    var r = [];\n    var t;\n    do {\n      i++;\n      if (null == (t = advance(a))) {\n        throw error(\"Directive\");\n      }\n      ignored();\n      r.push({\n        kind: \"Directive\",\n        name: {\n          kind: \"Name\",\n          value: t\n        },\n        arguments: arguments_(e)\n      });\n    } while (64 === n.charCodeAt(i));\n    return r;\n  }\n}\n\nfunction type() {\n  var e;\n  var r = 0;\n  while (91 === n.charCodeAt(i)) {\n    r++;\n    i++;\n    ignored();\n  }\n  if (null == (e = advance(a))) {\n    throw error(\"NamedType\");\n  }\n  ignored();\n  var t = {\n    kind: \"NamedType\",\n    name: {\n      kind: \"Name\",\n      value: e\n    }\n  };\n  do {\n    if (33 === n.charCodeAt(i)) {\n      i++;\n      ignored();\n      t = {\n        kind: \"NonNullType\",\n        type: t\n      };\n    }\n    if (r) {\n      if (93 !== n.charCodeAt(i++)) {\n        throw error(\"NamedType\");\n      }\n      ignored();\n      t = {\n        kind: \"ListType\",\n        type: t\n      };\n    }\n  } while (r--);\n  return t;\n}\n\nvar d = new RegExp(\"(?:(\\\\.{3})|(\" + a.source + \"))\", \"y\");\n\nvar v = function(e) {\n  e[e.Spread = 1] = \"Spread\";\n  e[e.Name = 2] = \"Name\";\n  return e;\n}(v || {});\n\nfunction selectionSet() {\n  var e = [];\n  var r;\n  var t;\n  do {\n    d.lastIndex = i;\n    if (null != (t = d.exec(n))) {\n      i = d.lastIndex;\n      if (null != t[v.Spread]) {\n        ignored();\n        var l = advance(a);\n        if (null != l && \"on\" !== l) {\n          ignored();\n          e.push({\n            kind: \"FragmentSpread\",\n            name: {\n              kind: \"Name\",\n              value: l\n            },\n            directives: directives(!1)\n          });\n        } else {\n          ignored();\n          if (\"on\" === l) {\n            if (null == (l = advance(a))) {\n              throw error(\"NamedType\");\n            }\n            ignored();\n          }\n          var o = directives(!1);\n          if (123 !== n.charCodeAt(i++)) {\n            throw error(\"InlineFragment\");\n          }\n          ignored();\n          e.push({\n            kind: \"InlineFragment\",\n            typeCondition: l ? {\n              kind: \"NamedType\",\n              name: {\n                kind: \"Name\",\n                value: l\n              }\n            } : void 0,\n            directives: o,\n            selectionSet: selectionSet()\n          });\n        }\n      } else if (null != (r = t[v.Name])) {\n        var u = void 0;\n        ignored();\n        if (58 === n.charCodeAt(i)) {\n          i++;\n          ignored();\n          u = r;\n          if (null == (r = advance(a))) {\n            throw error(\"Field\");\n          }\n          ignored();\n        }\n        var s = arguments_(!1);\n        ignored();\n        var c = directives(!1);\n        var f = void 0;\n        if (123 === n.charCodeAt(i)) {\n          i++;\n          ignored();\n          f = selectionSet();\n        }\n        e.push({\n          kind: \"Field\",\n          alias: u ? {\n            kind: \"Name\",\n            value: u\n          } : void 0,\n          name: {\n            kind: \"Name\",\n            value: r\n          },\n          arguments: s,\n          directives: c,\n          selectionSet: f\n        });\n      }\n    } else {\n      throw error(\"SelectionSet\");\n    }\n  } while (125 !== n.charCodeAt(i));\n  i++;\n  ignored();\n  return {\n    kind: \"SelectionSet\",\n    selections: e\n  };\n}\n\nfunction fragmentDefinition() {\n  var e;\n  var r;\n  if (null == (e = advance(a))) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  if (\"on\" !== advance(a)) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  if (null == (r = advance(a))) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  var t = directives(!1);\n  if (123 !== n.charCodeAt(i++)) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  return {\n    kind: \"FragmentDefinition\",\n    name: {\n      kind: \"Name\",\n      value: e\n    },\n    typeCondition: {\n      kind: \"NamedType\",\n      name: {\n        kind: \"Name\",\n        value: r\n      }\n    },\n    directives: t,\n    selectionSet: selectionSet()\n  };\n}\n\nvar s = /(?:query|mutation|subscription|fragment)/y;\n\nfunction operationDefinition(e) {\n  var r;\n  var t;\n  var l;\n  if (e) {\n    ignored();\n    r = advance(a);\n    t = function variableDefinitions() {\n      ignored();\n      if (40 === n.charCodeAt(i)) {\n        var e = [];\n        i++;\n        ignored();\n        var r;\n        do {\n          if (36 !== n.charCodeAt(i++)) {\n            throw error(\"Variable\");\n          }\n          if (null == (r = advance(a))) {\n            throw error(\"Variable\");\n          }\n          ignored();\n          if (58 !== n.charCodeAt(i++)) {\n            throw error(\"VariableDefinition\");\n          }\n          ignored();\n          var t = type();\n          var l = void 0;\n          if (61 === n.charCodeAt(i)) {\n            i++;\n            ignored();\n            l = value(!0);\n          }\n          ignored();\n          e.push({\n            kind: \"VariableDefinition\",\n            variable: {\n              kind: \"Variable\",\n              name: {\n                kind: \"Name\",\n                value: r\n              }\n            },\n            type: t,\n            defaultValue: l,\n            directives: directives(!0)\n          });\n        } while (41 !== n.charCodeAt(i));\n        i++;\n        ignored();\n        return e;\n      }\n    }();\n    l = directives(!1);\n  }\n  if (123 === n.charCodeAt(i)) {\n    i++;\n    ignored();\n    return {\n      kind: \"OperationDefinition\",\n      operation: e || \"query\",\n      name: r ? {\n        kind: \"Name\",\n        value: r\n      } : void 0,\n      variableDefinitions: t,\n      directives: l,\n      selectionSet: selectionSet()\n    };\n  }\n}\n\nfunction parse(e, r) {\n  i = 0;\n  return function document(e, r) {\n    var n;\n    var t;\n    ignored();\n    var a = [];\n    do {\n      if (\"fragment\" === (n = advance(s))) {\n        ignored();\n        a.push(fragmentDefinition());\n      } else if (null != (t = operationDefinition(n))) {\n        a.push(t);\n      } else {\n        throw error(\"Document\");\n      }\n    } while (i < e.length);\n    if (!r) {\n      var l;\n      return {\n        kind: \"Document\",\n        definitions: a,\n        set loc(e) {\n          l = e;\n        },\n        get loc() {\n          if (!l) {\n            l = {\n              start: 0,\n              end: e.length,\n              startToken: void 0,\n              endToken: void 0,\n              source: {\n                body: e,\n                name: \"graphql.web\",\n                locationOffset: {\n                  line: 1,\n                  column: 1\n                }\n              }\n            };\n          }\n          return l;\n        }\n      };\n    }\n    return {\n      kind: \"Document\",\n      definitions: a\n    };\n  }(n = \"string\" == typeof e.body ? e.body : e, r && r.noLocation);\n}\n\nfunction parseValue(e, r) {\n  n = \"string\" == typeof e.body ? e.body : e;\n  i = 0;\n  ignored();\n  return value(!1);\n}\n\nfunction parseType(e, r) {\n  n = \"string\" == typeof e.body ? e.body : e;\n  i = 0;\n  return type();\n}\n\nvar c = {};\n\nfunction visit(e, r) {\n  var n = [];\n  var i = [];\n  try {\n    var t = function traverse(e, t, a) {\n      var l = !1;\n      var o = r[e.kind] && r[e.kind].enter || r[e.kind] || r.enter;\n      var u = o && o.call(r, e, t, a, i, n);\n      if (!1 === u) {\n        return e;\n      } else if (null === u) {\n        return null;\n      } else if (u === c) {\n        throw c;\n      } else if (u && \"string\" == typeof u.kind) {\n        l = u !== e;\n        e = u;\n      }\n      if (a) {\n        n.push(a);\n      }\n      var d;\n      var v = {\n        ...e\n      };\n      for (var s in e) {\n        i.push(s);\n        var f = e[s];\n        if (Array.isArray(f)) {\n          var m = [];\n          for (var g = 0; g < f.length; g++) {\n            if (null != f[g] && \"string\" == typeof f[g].kind) {\n              n.push(e);\n              i.push(g);\n              d = traverse(f[g], g, f);\n              i.pop();\n              n.pop();\n              if (null == d) {\n                l = !0;\n              } else {\n                l = l || d !== f[g];\n                m.push(d);\n              }\n            }\n          }\n          f = m;\n        } else if (null != f && \"string\" == typeof f.kind) {\n          if (void 0 !== (d = traverse(f, s, e))) {\n            l = l || f !== d;\n            f = d;\n          }\n        }\n        i.pop();\n        if (l) {\n          v[s] = f;\n        }\n      }\n      if (a) {\n        n.pop();\n      }\n      var p = r[e.kind] && r[e.kind].leave || r.leave;\n      var h = p && p.call(r, e, t, a, i, n);\n      if (h === c) {\n        throw c;\n      } else if (void 0 !== h) {\n        return h;\n      } else if (void 0 !== u) {\n        return l ? v : u;\n      } else {\n        return l ? v : e;\n      }\n    }(e);\n    return void 0 !== t && !1 !== t ? t : e;\n  } catch (r) {\n    if (r !== c) {\n      throw r;\n    }\n    return e;\n  }\n}\n\nfunction mapJoin(e, r, n) {\n  var i = \"\";\n  for (var t = 0; t < e.length; t++) {\n    if (t) {\n      i += r;\n    }\n    i += n(e[t]);\n  }\n  return i;\n}\n\nfunction printString(e) {\n  return JSON.stringify(e);\n}\n\nfunction printBlockString(e) {\n  return '\"\"\"\\n' + e.replace(/\"\"\"/g, '\\\\\"\"\"') + '\\n\"\"\"';\n}\n\nvar f = \"\\n\";\n\nvar m = {\n  OperationDefinition(e) {\n    var r = e.operation;\n    if (e.name) {\n      r += \" \" + e.name.value;\n    }\n    if (e.variableDefinitions && e.variableDefinitions.length) {\n      if (!e.name) {\n        r += \" \";\n      }\n      r += \"(\" + mapJoin(e.variableDefinitions, \", \", m.VariableDefinition) + \")\";\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", m.Directive);\n    }\n    return \"query\" !== r ? r + \" \" + m.SelectionSet(e.selectionSet) : m.SelectionSet(e.selectionSet);\n  },\n  VariableDefinition(e) {\n    var r = m.Variable(e.variable) + \": \" + _print(e.type);\n    if (e.defaultValue) {\n      r += \" = \" + _print(e.defaultValue);\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", m.Directive);\n    }\n    return r;\n  },\n  Field(e) {\n    var r = e.alias ? e.alias.value + \": \" + e.name.value : e.name.value;\n    if (e.arguments && e.arguments.length) {\n      var n = mapJoin(e.arguments, \", \", m.Argument);\n      if (r.length + n.length + 2 > 80) {\n        r += \"(\" + (f += \"  \") + mapJoin(e.arguments, f, m.Argument) + (f = f.slice(0, -2)) + \")\";\n      } else {\n        r += \"(\" + n + \")\";\n      }\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", m.Directive);\n    }\n    if (e.selectionSet) {\n      r += \" \" + m.SelectionSet(e.selectionSet);\n    }\n    return r;\n  },\n  StringValue(e) {\n    if (e.block) {\n      return printBlockString(e.value).replace(/\\n/g, f);\n    } else {\n      return printString(e.value);\n    }\n  },\n  BooleanValue: e => \"\" + e.value,\n  NullValue: e => \"null\",\n  IntValue: e => e.value,\n  FloatValue: e => e.value,\n  EnumValue: e => e.value,\n  Name: e => e.value,\n  Variable: e => \"$\" + e.name.value,\n  ListValue: e => \"[\" + mapJoin(e.values, \", \", _print) + \"]\",\n  ObjectValue: e => \"{\" + mapJoin(e.fields, \", \", m.ObjectField) + \"}\",\n  ObjectField: e => e.name.value + \": \" + _print(e.value),\n  Document(e) {\n    if (!e.definitions || !e.definitions.length) {\n      return \"\";\n    }\n    return mapJoin(e.definitions, \"\\n\\n\", _print);\n  },\n  SelectionSet: e => \"{\" + (f += \"  \") + mapJoin(e.selections, f, _print) + (f = f.slice(0, -2)) + \"}\",\n  Argument: e => e.name.value + \": \" + _print(e.value),\n  FragmentSpread(e) {\n    var r = \"...\" + e.name.value;\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", m.Directive);\n    }\n    return r;\n  },\n  InlineFragment(e) {\n    var r = \"...\";\n    if (e.typeCondition) {\n      r += \" on \" + e.typeCondition.name.value;\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", m.Directive);\n    }\n    return r += \" \" + m.SelectionSet(e.selectionSet);\n  },\n  FragmentDefinition(e) {\n    var r = \"fragment \" + e.name.value;\n    r += \" on \" + e.typeCondition.name.value;\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", m.Directive);\n    }\n    return r + \" \" + m.SelectionSet(e.selectionSet);\n  },\n  Directive(e) {\n    var r = \"@\" + e.name.value;\n    if (e.arguments && e.arguments.length) {\n      r += \"(\" + mapJoin(e.arguments, \", \", m.Argument) + \")\";\n    }\n    return r;\n  },\n  NamedType: e => e.name.value,\n  ListType: e => \"[\" + _print(e.type) + \"]\",\n  NonNullType: e => _print(e.type) + \"!\"\n};\n\nvar _print = e => m[e.kind](e);\n\nfunction print(e) {\n  f = \"\\n\";\n  return m[e.kind] ? m[e.kind](e) : \"\";\n}\n\nfunction valueFromASTUntyped(e, r) {\n  switch (e.kind) {\n   case \"NullValue\":\n    return null;\n\n   case \"IntValue\":\n    return parseInt(e.value, 10);\n\n   case \"FloatValue\":\n    return parseFloat(e.value);\n\n   case \"StringValue\":\n   case \"EnumValue\":\n   case \"BooleanValue\":\n    return e.value;\n\n   case \"ListValue\":\n    var n = [];\n    for (var i = 0, t = e.values.length; i < t; i++) {\n      n.push(valueFromASTUntyped(e.values[i], r));\n    }\n    return n;\n\n   case \"ObjectValue\":\n    var a = Object.create(null);\n    for (var l = 0, o = e.fields.length; l < o; l++) {\n      var u = e.fields[l];\n      a[u.name.value] = valueFromASTUntyped(u.value, r);\n    }\n    return a;\n\n   case \"Variable\":\n    return r && r[e.name.value];\n  }\n}\n\nfunction valueFromTypeNode(e, r, n) {\n  if (\"Variable\" === e.kind) {\n    return n ? valueFromTypeNode(n[e.name.value], r, n) : void 0;\n  } else if (\"NonNullType\" === r.kind) {\n    return \"NullValue\" !== e.kind ? valueFromTypeNode(e, r, n) : void 0;\n  } else if (\"NullValue\" === e.kind) {\n    return null;\n  } else if (\"ListType\" === r.kind) {\n    if (\"ListValue\" === e.kind) {\n      var i = [];\n      for (var t = 0, a = e.values.length; t < a; t++) {\n        var l = valueFromTypeNode(e.values[t], r.type, n);\n        if (void 0 === l) {\n          return;\n        } else {\n          i.push(l);\n        }\n      }\n      return i;\n    }\n  } else if (\"NamedType\" === r.kind) {\n    switch (r.name.value) {\n     case \"Int\":\n     case \"Float\":\n     case \"String\":\n     case \"Bool\":\n      return r.name.value + \"Value\" === e.kind ? valueFromASTUntyped(e, n) : void 0;\n\n     default:\n      return valueFromASTUntyped(e, n);\n    }\n  }\n}\n\nfunction isSelectionNode(e) {\n  return \"Field\" === e.kind || \"FragmentSpread\" === e.kind || \"InlineFragment\" === e.kind;\n}\n\nfunction Source(e, r, n) {\n  return {\n    body: e,\n    name: r,\n    locationOffset: n || {\n      line: 1,\n      column: 1\n    }\n  };\n}\n\n\n//# sourceMappingURL=graphql.web.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQDBuby1jby9ncmFwaHFsLndlYi9kaXN0L2dyYXBocWwud2ViLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0EsK0RBQStELEdBQUcsS0FBSyxFQUFFO0FBQ3pFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsY0FBYztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsUUFBUTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNDQUFzQyxvRkFBb0Y7QUFDMUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsUUFBUTs7QUFFVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLDRCQUE0QixFQUFFOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsUUFBUTs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsY0FBYztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsY0FBYztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwrQ0FBK0M7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILHVCQUF1Qiw4RUFBOEU7QUFDckc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlDQUF5QyxPQUFPO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUNBQXlDLE9BQU87QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSwyQ0FBMkMsT0FBTztBQUNsRDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRW1OO0FBQ25OIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWFsX2Nyb3NzaW5nLy4vbm9kZV9tb2R1bGVzL0Awbm8tY28vZ3JhcGhxbC53ZWIvZGlzdC9ncmFwaHFsLndlYi5tanM/MjI5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZSA9IHtcbiAgTkFNRTogXCJOYW1lXCIsXG4gIERPQ1VNRU5UOiBcIkRvY3VtZW50XCIsXG4gIE9QRVJBVElPTl9ERUZJTklUSU9OOiBcIk9wZXJhdGlvbkRlZmluaXRpb25cIixcbiAgVkFSSUFCTEVfREVGSU5JVElPTjogXCJWYXJpYWJsZURlZmluaXRpb25cIixcbiAgU0VMRUNUSU9OX1NFVDogXCJTZWxlY3Rpb25TZXRcIixcbiAgRklFTEQ6IFwiRmllbGRcIixcbiAgQVJHVU1FTlQ6IFwiQXJndW1lbnRcIixcbiAgRlJBR01FTlRfU1BSRUFEOiBcIkZyYWdtZW50U3ByZWFkXCIsXG4gIElOTElORV9GUkFHTUVOVDogXCJJbmxpbmVGcmFnbWVudFwiLFxuICBGUkFHTUVOVF9ERUZJTklUSU9OOiBcIkZyYWdtZW50RGVmaW5pdGlvblwiLFxuICBWQVJJQUJMRTogXCJWYXJpYWJsZVwiLFxuICBJTlQ6IFwiSW50VmFsdWVcIixcbiAgRkxPQVQ6IFwiRmxvYXRWYWx1ZVwiLFxuICBTVFJJTkc6IFwiU3RyaW5nVmFsdWVcIixcbiAgQk9PTEVBTjogXCJCb29sZWFuVmFsdWVcIixcbiAgTlVMTDogXCJOdWxsVmFsdWVcIixcbiAgRU5VTTogXCJFbnVtVmFsdWVcIixcbiAgTElTVDogXCJMaXN0VmFsdWVcIixcbiAgT0JKRUNUOiBcIk9iamVjdFZhbHVlXCIsXG4gIE9CSkVDVF9GSUVMRDogXCJPYmplY3RGaWVsZFwiLFxuICBESVJFQ1RJVkU6IFwiRGlyZWN0aXZlXCIsXG4gIE5BTUVEX1RZUEU6IFwiTmFtZWRUeXBlXCIsXG4gIExJU1RfVFlQRTogXCJMaXN0VHlwZVwiLFxuICBOT05fTlVMTF9UWVBFOiBcIk5vbk51bGxUeXBlXCJcbn07XG5cbnZhciByID0ge1xuICBRVUVSWTogXCJxdWVyeVwiLFxuICBNVVRBVElPTjogXCJtdXRhdGlvblwiLFxuICBTVUJTQ1JJUFRJT046IFwic3Vic2NyaXB0aW9uXCJcbn07XG5cbmNsYXNzIEdyYXBoUUxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoZSwgciwgbiwgaSwgdCwgYSwgbCkge1xuICAgIHN1cGVyKGUpO1xuICAgIHRoaXMubmFtZSA9IFwiR3JhcGhRTEVycm9yXCI7XG4gICAgdGhpcy5tZXNzYWdlID0gZTtcbiAgICBpZiAodCkge1xuICAgICAgdGhpcy5wYXRoID0gdDtcbiAgICB9XG4gICAgaWYgKHIpIHtcbiAgICAgIHRoaXMubm9kZXMgPSBBcnJheS5pc0FycmF5KHIpID8gciA6IFsgciBdO1xuICAgIH1cbiAgICBpZiAobikge1xuICAgICAgdGhpcy5zb3VyY2UgPSBuO1xuICAgIH1cbiAgICBpZiAoaSkge1xuICAgICAgdGhpcy5wb3NpdGlvbnMgPSBpO1xuICAgIH1cbiAgICBpZiAoYSkge1xuICAgICAgdGhpcy5vcmlnaW5hbEVycm9yID0gYTtcbiAgICB9XG4gICAgdmFyIG8gPSBsO1xuICAgIGlmICghbyAmJiBhKSB7XG4gICAgICB2YXIgdSA9IGEuZXh0ZW5zaW9ucztcbiAgICAgIGlmICh1ICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIHUpIHtcbiAgICAgICAgbyA9IHU7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZXh0ZW5zaW9ucyA9IG8gfHwge307XG4gIH1cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi50aGlzLFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlXG4gICAgfTtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICB9XG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gXCJHcmFwaFFMRXJyb3JcIjtcbiAgfVxufVxuXG52YXIgbjtcblxudmFyIGk7XG5cbmZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgcmV0dXJuIG5ldyBHcmFwaFFMRXJyb3IoYFN5bnRheCBFcnJvcjogVW5leHBlY3RlZCB0b2tlbiBhdCAke2l9IGluICR7ZX1gKTtcbn1cblxuZnVuY3Rpb24gYWR2YW5jZShlKSB7XG4gIGUubGFzdEluZGV4ID0gaTtcbiAgaWYgKGUudGVzdChuKSkge1xuICAgIHJldHVybiBuLnNsaWNlKGksIGkgPSBlLmxhc3RJbmRleCk7XG4gIH1cbn1cblxudmFyIHQgPSAvICsoPz1bXlxcc10pL3k7XG5cbmZ1bmN0aW9uIGJsb2NrU3RyaW5nKGUpIHtcbiAgdmFyIHIgPSBlLnNwbGl0KFwiXFxuXCIpO1xuICB2YXIgbiA9IFwiXCI7XG4gIHZhciBpID0gMDtcbiAgdmFyIGEgPSAwO1xuICB2YXIgbCA9IHIubGVuZ3RoIC0gMTtcbiAgZm9yICh2YXIgbyA9IDA7IG8gPCByLmxlbmd0aDsgbysrKSB7XG4gICAgdC5sYXN0SW5kZXggPSAwO1xuICAgIGlmICh0LnRlc3QocltvXSkpIHtcbiAgICAgIGlmIChvICYmICghaSB8fCB0Lmxhc3RJbmRleCA8IGkpKSB7XG4gICAgICAgIGkgPSB0Lmxhc3RJbmRleDtcbiAgICAgIH1cbiAgICAgIGEgPSBhIHx8IG87XG4gICAgICBsID0gbztcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgdSA9IGE7IHUgPD0gbDsgdSsrKSB7XG4gICAgaWYgKHUgIT09IGEpIHtcbiAgICAgIG4gKz0gXCJcXG5cIjtcbiAgICB9XG4gICAgbiArPSByW3VdLnNsaWNlKGkpLnJlcGxhY2UoL1xcXFxcIlwiXCIvZywgJ1wiXCJcIicpO1xuICB9XG4gIHJldHVybiBuO1xufVxuXG5mdW5jdGlvbiBpZ25vcmVkKCkge1xuICBmb3IgKHZhciBlID0gMCB8IG4uY2hhckNvZGVBdChpKyspOyA5ID09PSBlIHx8IDEwID09PSBlIHx8IDEzID09PSBlIHx8IDMyID09PSBlIHx8IDM1ID09PSBlIHx8IDQ0ID09PSBlIHx8IDY1Mjc5ID09PSBlOyBlID0gMCB8IG4uY2hhckNvZGVBdChpKyspKSB7XG4gICAgaWYgKDM1ID09PSBlKSB7XG4gICAgICB3aGlsZSAoMTAgIT09IChlID0gbi5jaGFyQ29kZUF0KGkrKykpICYmIDEzICE9PSBlKSB7fVxuICAgIH1cbiAgfVxuICBpLS07XG59XG5cbnZhciBhID0gL1tfQS1aYS16XVxcdyoveTtcblxudmFyIGwgPSBuZXcgUmVnRXhwKFwiKD86KG51bGx8dHJ1ZXxmYWxzZSl8XFxcXCQoXCIgKyBhLnNvdXJjZSArICcpfCgtP1xcXFxkKykoKD86XFxcXC5cXFxcZCspP1tlRV1bKy1dP1xcXFxkK3xcXFxcLlxcXFxkKyk/fChcIlwiXCIoPzpcIlwiXCJ8KD86W1xcXFxzXFxcXFNdKj9bXlxcXFxcXFxcXSlcIlwiXCIpKXwoXCIoPzpcInxbXlxcXFxyXFxcXG5dKj9bXlxcXFxcXFxcXVwiKSl8KCcgKyBhLnNvdXJjZSArIFwiKSlcIiwgXCJ5XCIpO1xuXG52YXIgbyA9IGZ1bmN0aW9uKGUpIHtcbiAgZVtlLkNvbnN0ID0gMV0gPSBcIkNvbnN0XCI7XG4gIGVbZS5WYXIgPSAyXSA9IFwiVmFyXCI7XG4gIGVbZS5JbnQgPSAzXSA9IFwiSW50XCI7XG4gIGVbZS5GbG9hdCA9IDRdID0gXCJGbG9hdFwiO1xuICBlW2UuQmxvY2tTdHJpbmcgPSA1XSA9IFwiQmxvY2tTdHJpbmdcIjtcbiAgZVtlLlN0cmluZyA9IDZdID0gXCJTdHJpbmdcIjtcbiAgZVtlLkVudW0gPSA3XSA9IFwiRW51bVwiO1xuICByZXR1cm4gZTtcbn0obyB8fCB7fSk7XG5cbnZhciB1ID0gL1xcXFwvO1xuXG5mdW5jdGlvbiB2YWx1ZShlKSB7XG4gIHZhciByO1xuICB2YXIgdDtcbiAgbC5sYXN0SW5kZXggPSBpO1xuICBpZiAoOTEgPT09IG4uY2hhckNvZGVBdChpKSkge1xuICAgIGkrKztcbiAgICBpZ25vcmVkKCk7XG4gICAgdmFyIGQgPSBbXTtcbiAgICB3aGlsZSAoOTMgIT09IG4uY2hhckNvZGVBdChpKSkge1xuICAgICAgZC5wdXNoKHZhbHVlKGUpKTtcbiAgICB9XG4gICAgaSsrO1xuICAgIGlnbm9yZWQoKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogXCJMaXN0VmFsdWVcIixcbiAgICAgIHZhbHVlczogZFxuICAgIH07XG4gIH0gZWxzZSBpZiAoMTIzID09PSBuLmNoYXJDb2RlQXQoaSkpIHtcbiAgICBpKys7XG4gICAgaWdub3JlZCgpO1xuICAgIHZhciB2ID0gW107XG4gICAgd2hpbGUgKDEyNSAhPT0gbi5jaGFyQ29kZUF0KGkpKSB7XG4gICAgICBpZiAobnVsbCA9PSAociA9IGFkdmFuY2UoYSkpKSB7XG4gICAgICAgIHRocm93IGVycm9yKFwiT2JqZWN0RmllbGRcIik7XG4gICAgICB9XG4gICAgICBpZ25vcmVkKCk7XG4gICAgICBpZiAoNTggIT09IG4uY2hhckNvZGVBdChpKyspKSB7XG4gICAgICAgIHRocm93IGVycm9yKFwiT2JqZWN0RmllbGRcIik7XG4gICAgICB9XG4gICAgICBpZ25vcmVkKCk7XG4gICAgICB2LnB1c2goe1xuICAgICAgICBraW5kOiBcIk9iamVjdEZpZWxkXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICBraW5kOiBcIk5hbWVcIixcbiAgICAgICAgICB2YWx1ZTogclxuICAgICAgICB9LFxuICAgICAgICB2YWx1ZTogdmFsdWUoZSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpKys7XG4gICAgaWdub3JlZCgpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBcIk9iamVjdFZhbHVlXCIsXG4gICAgICBmaWVsZHM6IHZcbiAgICB9O1xuICB9IGVsc2UgaWYgKG51bGwgIT0gKHQgPSBsLmV4ZWMobikpKSB7XG4gICAgaSA9IGwubGFzdEluZGV4O1xuICAgIGlnbm9yZWQoKTtcbiAgICBpZiAobnVsbCAhPSAociA9IHRbby5Db25zdF0pKSB7XG4gICAgICByZXR1cm4gXCJudWxsXCIgPT09IHIgPyB7XG4gICAgICAgIGtpbmQ6IFwiTnVsbFZhbHVlXCJcbiAgICAgIH0gOiB7XG4gICAgICAgIGtpbmQ6IFwiQm9vbGVhblZhbHVlXCIsXG4gICAgICAgIHZhbHVlOiBcInRydWVcIiA9PT0gclxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG51bGwgIT0gKHIgPSB0W28uVmFyXSkpIHtcbiAgICAgIGlmIChlKSB7XG4gICAgICAgIHRocm93IGVycm9yKFwiVmFyaWFibGVcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6IFwiVmFyaWFibGVcIixcbiAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBraW5kOiBcIk5hbWVcIixcbiAgICAgICAgICAgIHZhbHVlOiByXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobnVsbCAhPSAociA9IHRbby5JbnRdKSkge1xuICAgICAgdmFyIHM7XG4gICAgICBpZiAobnVsbCAhPSAocyA9IHRbby5GbG9hdF0pKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAga2luZDogXCJGbG9hdFZhbHVlXCIsXG4gICAgICAgICAgdmFsdWU6IHIgKyBzXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6IFwiSW50VmFsdWVcIixcbiAgICAgICAgICB2YWx1ZTogclxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobnVsbCAhPSAociA9IHRbby5CbG9ja1N0cmluZ10pKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBcIlN0cmluZ1ZhbHVlXCIsXG4gICAgICAgIHZhbHVlOiBibG9ja1N0cmluZyhyLnNsaWNlKDMsIC0zKSksXG4gICAgICAgIGJsb2NrOiAhMFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG51bGwgIT0gKHIgPSB0W28uU3RyaW5nXSkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IFwiU3RyaW5nVmFsdWVcIixcbiAgICAgICAgdmFsdWU6IHUudGVzdChyKSA/IEpTT04ucGFyc2UocikgOiByLnNsaWNlKDEsIC0xKSxcbiAgICAgICAgYmxvY2s6ICExXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAobnVsbCAhPSAociA9IHRbby5FbnVtXSkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IFwiRW51bVZhbHVlXCIsXG4gICAgICAgIHZhbHVlOiByXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICB0aHJvdyBlcnJvcihcIlZhbHVlXCIpO1xufVxuXG5mdW5jdGlvbiBhcmd1bWVudHNfKGUpIHtcbiAgaWYgKDQwID09PSBuLmNoYXJDb2RlQXQoaSkpIHtcbiAgICB2YXIgciA9IFtdO1xuICAgIGkrKztcbiAgICBpZ25vcmVkKCk7XG4gICAgdmFyIHQ7XG4gICAgZG8ge1xuICAgICAgaWYgKG51bGwgPT0gKHQgPSBhZHZhbmNlKGEpKSkge1xuICAgICAgICB0aHJvdyBlcnJvcihcIkFyZ3VtZW50XCIpO1xuICAgICAgfVxuICAgICAgaWdub3JlZCgpO1xuICAgICAgaWYgKDU4ICE9PSBuLmNoYXJDb2RlQXQoaSsrKSkge1xuICAgICAgICB0aHJvdyBlcnJvcihcIkFyZ3VtZW50XCIpO1xuICAgICAgfVxuICAgICAgaWdub3JlZCgpO1xuICAgICAgci5wdXNoKHtcbiAgICAgICAga2luZDogXCJBcmd1bWVudFwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAga2luZDogXCJOYW1lXCIsXG4gICAgICAgICAgdmFsdWU6IHRcbiAgICAgICAgfSxcbiAgICAgICAgdmFsdWU6IHZhbHVlKGUpXG4gICAgICB9KTtcbiAgICB9IHdoaWxlICg0MSAhPT0gbi5jaGFyQ29kZUF0KGkpKTtcbiAgICBpKys7XG4gICAgaWdub3JlZCgpO1xuICAgIHJldHVybiByO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpcmVjdGl2ZXMoZSkge1xuICBpZiAoNjQgPT09IG4uY2hhckNvZGVBdChpKSkge1xuICAgIHZhciByID0gW107XG4gICAgdmFyIHQ7XG4gICAgZG8ge1xuICAgICAgaSsrO1xuICAgICAgaWYgKG51bGwgPT0gKHQgPSBhZHZhbmNlKGEpKSkge1xuICAgICAgICB0aHJvdyBlcnJvcihcIkRpcmVjdGl2ZVwiKTtcbiAgICAgIH1cbiAgICAgIGlnbm9yZWQoKTtcbiAgICAgIHIucHVzaCh7XG4gICAgICAgIGtpbmQ6IFwiRGlyZWN0aXZlXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICBraW5kOiBcIk5hbWVcIixcbiAgICAgICAgICB2YWx1ZTogdFxuICAgICAgICB9LFxuICAgICAgICBhcmd1bWVudHM6IGFyZ3VtZW50c18oZSlcbiAgICAgIH0pO1xuICAgIH0gd2hpbGUgKDY0ID09PSBuLmNoYXJDb2RlQXQoaSkpO1xuICAgIHJldHVybiByO1xuICB9XG59XG5cbmZ1bmN0aW9uIHR5cGUoKSB7XG4gIHZhciBlO1xuICB2YXIgciA9IDA7XG4gIHdoaWxlICg5MSA9PT0gbi5jaGFyQ29kZUF0KGkpKSB7XG4gICAgcisrO1xuICAgIGkrKztcbiAgICBpZ25vcmVkKCk7XG4gIH1cbiAgaWYgKG51bGwgPT0gKGUgPSBhZHZhbmNlKGEpKSkge1xuICAgIHRocm93IGVycm9yKFwiTmFtZWRUeXBlXCIpO1xuICB9XG4gIGlnbm9yZWQoKTtcbiAgdmFyIHQgPSB7XG4gICAga2luZDogXCJOYW1lZFR5cGVcIixcbiAgICBuYW1lOiB7XG4gICAgICBraW5kOiBcIk5hbWVcIixcbiAgICAgIHZhbHVlOiBlXG4gICAgfVxuICB9O1xuICBkbyB7XG4gICAgaWYgKDMzID09PSBuLmNoYXJDb2RlQXQoaSkpIHtcbiAgICAgIGkrKztcbiAgICAgIGlnbm9yZWQoKTtcbiAgICAgIHQgPSB7XG4gICAgICAgIGtpbmQ6IFwiTm9uTnVsbFR5cGVcIixcbiAgICAgICAgdHlwZTogdFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHIpIHtcbiAgICAgIGlmICg5MyAhPT0gbi5jaGFyQ29kZUF0KGkrKykpIHtcbiAgICAgICAgdGhyb3cgZXJyb3IoXCJOYW1lZFR5cGVcIik7XG4gICAgICB9XG4gICAgICBpZ25vcmVkKCk7XG4gICAgICB0ID0ge1xuICAgICAgICBraW5kOiBcIkxpc3RUeXBlXCIsXG4gICAgICAgIHR5cGU6IHRcbiAgICAgIH07XG4gICAgfVxuICB9IHdoaWxlIChyLS0pO1xuICByZXR1cm4gdDtcbn1cblxudmFyIGQgPSBuZXcgUmVnRXhwKFwiKD86KFxcXFwuezN9KXwoXCIgKyBhLnNvdXJjZSArIFwiKSlcIiwgXCJ5XCIpO1xuXG52YXIgdiA9IGZ1bmN0aW9uKGUpIHtcbiAgZVtlLlNwcmVhZCA9IDFdID0gXCJTcHJlYWRcIjtcbiAgZVtlLk5hbWUgPSAyXSA9IFwiTmFtZVwiO1xuICByZXR1cm4gZTtcbn0odiB8fCB7fSk7XG5cbmZ1bmN0aW9uIHNlbGVjdGlvblNldCgpIHtcbiAgdmFyIGUgPSBbXTtcbiAgdmFyIHI7XG4gIHZhciB0O1xuICBkbyB7XG4gICAgZC5sYXN0SW5kZXggPSBpO1xuICAgIGlmIChudWxsICE9ICh0ID0gZC5leGVjKG4pKSkge1xuICAgICAgaSA9IGQubGFzdEluZGV4O1xuICAgICAgaWYgKG51bGwgIT0gdFt2LlNwcmVhZF0pIHtcbiAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICB2YXIgbCA9IGFkdmFuY2UoYSk7XG4gICAgICAgIGlmIChudWxsICE9IGwgJiYgXCJvblwiICE9PSBsKSB7XG4gICAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICAgIGUucHVzaCh7XG4gICAgICAgICAgICBraW5kOiBcIkZyYWdtZW50U3ByZWFkXCIsXG4gICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgIGtpbmQ6IFwiTmFtZVwiLFxuICAgICAgICAgICAgICB2YWx1ZTogbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMoITEpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICAgIGlmIChcIm9uXCIgPT09IGwpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09IChsID0gYWR2YW5jZShhKSkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgZXJyb3IoXCJOYW1lZFR5cGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZ25vcmVkKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvID0gZGlyZWN0aXZlcyghMSk7XG4gICAgICAgICAgaWYgKDEyMyAhPT0gbi5jaGFyQ29kZUF0KGkrKykpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yKFwiSW5saW5lRnJhZ21lbnRcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlnbm9yZWQoKTtcbiAgICAgICAgICBlLnB1c2goe1xuICAgICAgICAgICAga2luZDogXCJJbmxpbmVGcmFnbWVudFwiLFxuICAgICAgICAgICAgdHlwZUNvbmRpdGlvbjogbCA/IHtcbiAgICAgICAgICAgICAga2luZDogXCJOYW1lZFR5cGVcIixcbiAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIGtpbmQ6IFwiTmFtZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gOiB2b2lkIDAsXG4gICAgICAgICAgICBkaXJlY3RpdmVzOiBvLFxuICAgICAgICAgICAgc2VsZWN0aW9uU2V0OiBzZWxlY3Rpb25TZXQoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG51bGwgIT0gKHIgPSB0W3YuTmFtZV0pKSB7XG4gICAgICAgIHZhciB1ID0gdm9pZCAwO1xuICAgICAgICBpZ25vcmVkKCk7XG4gICAgICAgIGlmICg1OCA9PT0gbi5jaGFyQ29kZUF0KGkpKSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICAgIGlnbm9yZWQoKTtcbiAgICAgICAgICB1ID0gcjtcbiAgICAgICAgICBpZiAobnVsbCA9PSAociA9IGFkdmFuY2UoYSkpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcihcIkZpZWxkXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZ25vcmVkKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHMgPSBhcmd1bWVudHNfKCExKTtcbiAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICB2YXIgYyA9IGRpcmVjdGl2ZXMoITEpO1xuICAgICAgICB2YXIgZiA9IHZvaWQgMDtcbiAgICAgICAgaWYgKDEyMyA9PT0gbi5jaGFyQ29kZUF0KGkpKSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICAgIGlnbm9yZWQoKTtcbiAgICAgICAgICBmID0gc2VsZWN0aW9uU2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZS5wdXNoKHtcbiAgICAgICAgICBraW5kOiBcIkZpZWxkXCIsXG4gICAgICAgICAgYWxpYXM6IHUgPyB7XG4gICAgICAgICAgICBraW5kOiBcIk5hbWVcIixcbiAgICAgICAgICAgIHZhbHVlOiB1XG4gICAgICAgICAgfSA6IHZvaWQgMCxcbiAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBraW5kOiBcIk5hbWVcIixcbiAgICAgICAgICAgIHZhbHVlOiByXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhcmd1bWVudHM6IHMsXG4gICAgICAgICAgZGlyZWN0aXZlczogYyxcbiAgICAgICAgICBzZWxlY3Rpb25TZXQ6IGZcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVycm9yKFwiU2VsZWN0aW9uU2V0XCIpO1xuICAgIH1cbiAgfSB3aGlsZSAoMTI1ICE9PSBuLmNoYXJDb2RlQXQoaSkpO1xuICBpKys7XG4gIGlnbm9yZWQoKTtcbiAgcmV0dXJuIHtcbiAgICBraW5kOiBcIlNlbGVjdGlvblNldFwiLFxuICAgIHNlbGVjdGlvbnM6IGVcbiAgfTtcbn1cblxuZnVuY3Rpb24gZnJhZ21lbnREZWZpbml0aW9uKCkge1xuICB2YXIgZTtcbiAgdmFyIHI7XG4gIGlmIChudWxsID09IChlID0gYWR2YW5jZShhKSkpIHtcbiAgICB0aHJvdyBlcnJvcihcIkZyYWdtZW50RGVmaW5pdGlvblwiKTtcbiAgfVxuICBpZ25vcmVkKCk7XG4gIGlmIChcIm9uXCIgIT09IGFkdmFuY2UoYSkpIHtcbiAgICB0aHJvdyBlcnJvcihcIkZyYWdtZW50RGVmaW5pdGlvblwiKTtcbiAgfVxuICBpZ25vcmVkKCk7XG4gIGlmIChudWxsID09IChyID0gYWR2YW5jZShhKSkpIHtcbiAgICB0aHJvdyBlcnJvcihcIkZyYWdtZW50RGVmaW5pdGlvblwiKTtcbiAgfVxuICBpZ25vcmVkKCk7XG4gIHZhciB0ID0gZGlyZWN0aXZlcyghMSk7XG4gIGlmICgxMjMgIT09IG4uY2hhckNvZGVBdChpKyspKSB7XG4gICAgdGhyb3cgZXJyb3IoXCJGcmFnbWVudERlZmluaXRpb25cIik7XG4gIH1cbiAgaWdub3JlZCgpO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IFwiRnJhZ21lbnREZWZpbml0aW9uXCIsXG4gICAgbmFtZToge1xuICAgICAga2luZDogXCJOYW1lXCIsXG4gICAgICB2YWx1ZTogZVxuICAgIH0sXG4gICAgdHlwZUNvbmRpdGlvbjoge1xuICAgICAga2luZDogXCJOYW1lZFR5cGVcIixcbiAgICAgIG5hbWU6IHtcbiAgICAgICAga2luZDogXCJOYW1lXCIsXG4gICAgICAgIHZhbHVlOiByXG4gICAgICB9XG4gICAgfSxcbiAgICBkaXJlY3RpdmVzOiB0LFxuICAgIHNlbGVjdGlvblNldDogc2VsZWN0aW9uU2V0KClcbiAgfTtcbn1cblxudmFyIHMgPSAvKD86cXVlcnl8bXV0YXRpb258c3Vic2NyaXB0aW9ufGZyYWdtZW50KS95O1xuXG5mdW5jdGlvbiBvcGVyYXRpb25EZWZpbml0aW9uKGUpIHtcbiAgdmFyIHI7XG4gIHZhciB0O1xuICB2YXIgbDtcbiAgaWYgKGUpIHtcbiAgICBpZ25vcmVkKCk7XG4gICAgciA9IGFkdmFuY2UoYSk7XG4gICAgdCA9IGZ1bmN0aW9uIHZhcmlhYmxlRGVmaW5pdGlvbnMoKSB7XG4gICAgICBpZ25vcmVkKCk7XG4gICAgICBpZiAoNDAgPT09IG4uY2hhckNvZGVBdChpKSkge1xuICAgICAgICB2YXIgZSA9IFtdO1xuICAgICAgICBpKys7XG4gICAgICAgIGlnbm9yZWQoKTtcbiAgICAgICAgdmFyIHI7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAoMzYgIT09IG4uY2hhckNvZGVBdChpKyspKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcihcIlZhcmlhYmxlXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobnVsbCA9PSAociA9IGFkdmFuY2UoYSkpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcihcIlZhcmlhYmxlXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZ25vcmVkKCk7XG4gICAgICAgICAgaWYgKDU4ICE9PSBuLmNoYXJDb2RlQXQoaSsrKSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3IoXCJWYXJpYWJsZURlZmluaXRpb25cIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlnbm9yZWQoKTtcbiAgICAgICAgICB2YXIgdCA9IHR5cGUoKTtcbiAgICAgICAgICB2YXIgbCA9IHZvaWQgMDtcbiAgICAgICAgICBpZiAoNjEgPT09IG4uY2hhckNvZGVBdChpKSkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICAgICAgbCA9IHZhbHVlKCEwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICAgIGUucHVzaCh7XG4gICAgICAgICAgICBraW5kOiBcIlZhcmlhYmxlRGVmaW5pdGlvblwiLFxuICAgICAgICAgICAgdmFyaWFibGU6IHtcbiAgICAgICAgICAgICAga2luZDogXCJWYXJpYWJsZVwiLFxuICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAga2luZDogXCJOYW1lXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGU6IHQsXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGwsXG4gICAgICAgICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzKCEwKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IHdoaWxlICg0MSAhPT0gbi5jaGFyQ29kZUF0KGkpKTtcbiAgICAgICAgaSsrO1xuICAgICAgICBpZ25vcmVkKCk7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuICAgIH0oKTtcbiAgICBsID0gZGlyZWN0aXZlcyghMSk7XG4gIH1cbiAgaWYgKDEyMyA9PT0gbi5jaGFyQ29kZUF0KGkpKSB7XG4gICAgaSsrO1xuICAgIGlnbm9yZWQoKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogXCJPcGVyYXRpb25EZWZpbml0aW9uXCIsXG4gICAgICBvcGVyYXRpb246IGUgfHwgXCJxdWVyeVwiLFxuICAgICAgbmFtZTogciA/IHtcbiAgICAgICAga2luZDogXCJOYW1lXCIsXG4gICAgICAgIHZhbHVlOiByXG4gICAgICB9IDogdm9pZCAwLFxuICAgICAgdmFyaWFibGVEZWZpbml0aW9uczogdCxcbiAgICAgIGRpcmVjdGl2ZXM6IGwsXG4gICAgICBzZWxlY3Rpb25TZXQ6IHNlbGVjdGlvblNldCgpXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZShlLCByKSB7XG4gIGkgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gZG9jdW1lbnQoZSwgcikge1xuICAgIHZhciBuO1xuICAgIHZhciB0O1xuICAgIGlnbm9yZWQoKTtcbiAgICB2YXIgYSA9IFtdO1xuICAgIGRvIHtcbiAgICAgIGlmIChcImZyYWdtZW50XCIgPT09IChuID0gYWR2YW5jZShzKSkpIHtcbiAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICBhLnB1c2goZnJhZ21lbnREZWZpbml0aW9uKCkpO1xuICAgICAgfSBlbHNlIGlmIChudWxsICE9ICh0ID0gb3BlcmF0aW9uRGVmaW5pdGlvbihuKSkpIHtcbiAgICAgICAgYS5wdXNoKHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyb3IoXCJEb2N1bWVudFwiKTtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChpIDwgZS5sZW5ndGgpO1xuICAgIGlmICghcikge1xuICAgICAgdmFyIGw7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBcIkRvY3VtZW50XCIsXG4gICAgICAgIGRlZmluaXRpb25zOiBhLFxuICAgICAgICBzZXQgbG9jKGUpIHtcbiAgICAgICAgICBsID0gZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGxvYygpIHtcbiAgICAgICAgICBpZiAoIWwpIHtcbiAgICAgICAgICAgIGwgPSB7XG4gICAgICAgICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICAgICAgICBlbmQ6IGUubGVuZ3RoLFxuICAgICAgICAgICAgICBzdGFydFRva2VuOiB2b2lkIDAsXG4gICAgICAgICAgICAgIGVuZFRva2VuOiB2b2lkIDAsXG4gICAgICAgICAgICAgIHNvdXJjZToge1xuICAgICAgICAgICAgICAgIGJvZHk6IGUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJncmFwaHFsLndlYlwiLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uT2Zmc2V0OiB7XG4gICAgICAgICAgICAgICAgICBsaW5lOiAxLFxuICAgICAgICAgICAgICAgICAgY29sdW1uOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IFwiRG9jdW1lbnRcIixcbiAgICAgIGRlZmluaXRpb25zOiBhXG4gICAgfTtcbiAgfShuID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZS5ib2R5ID8gZS5ib2R5IDogZSwgciAmJiByLm5vTG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBwYXJzZVZhbHVlKGUsIHIpIHtcbiAgbiA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIGUuYm9keSA/IGUuYm9keSA6IGU7XG4gIGkgPSAwO1xuICBpZ25vcmVkKCk7XG4gIHJldHVybiB2YWx1ZSghMSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZShlLCByKSB7XG4gIG4gPSBcInN0cmluZ1wiID09IHR5cGVvZiBlLmJvZHkgPyBlLmJvZHkgOiBlO1xuICBpID0gMDtcbiAgcmV0dXJuIHR5cGUoKTtcbn1cblxudmFyIGMgPSB7fTtcblxuZnVuY3Rpb24gdmlzaXQoZSwgcikge1xuICB2YXIgbiA9IFtdO1xuICB2YXIgaSA9IFtdO1xuICB0cnkge1xuICAgIHZhciB0ID0gZnVuY3Rpb24gdHJhdmVyc2UoZSwgdCwgYSkge1xuICAgICAgdmFyIGwgPSAhMTtcbiAgICAgIHZhciBvID0gcltlLmtpbmRdICYmIHJbZS5raW5kXS5lbnRlciB8fCByW2Uua2luZF0gfHwgci5lbnRlcjtcbiAgICAgIHZhciB1ID0gbyAmJiBvLmNhbGwociwgZSwgdCwgYSwgaSwgbik7XG4gICAgICBpZiAoITEgPT09IHUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICB9IGVsc2UgaWYgKG51bGwgPT09IHUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHUgPT09IGMpIHtcbiAgICAgICAgdGhyb3cgYztcbiAgICAgIH0gZWxzZSBpZiAodSAmJiBcInN0cmluZ1wiID09IHR5cGVvZiB1LmtpbmQpIHtcbiAgICAgICAgbCA9IHUgIT09IGU7XG4gICAgICAgIGUgPSB1O1xuICAgICAgfVxuICAgICAgaWYgKGEpIHtcbiAgICAgICAgbi5wdXNoKGEpO1xuICAgICAgfVxuICAgICAgdmFyIGQ7XG4gICAgICB2YXIgdiA9IHtcbiAgICAgICAgLi4uZVxuICAgICAgfTtcbiAgICAgIGZvciAodmFyIHMgaW4gZSkge1xuICAgICAgICBpLnB1c2gocyk7XG4gICAgICAgIHZhciBmID0gZVtzXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZikpIHtcbiAgICAgICAgICB2YXIgbSA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIGcgPSAwOyBnIDwgZi5sZW5ndGg7IGcrKykge1xuICAgICAgICAgICAgaWYgKG51bGwgIT0gZltnXSAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBmW2ddLmtpbmQpIHtcbiAgICAgICAgICAgICAgbi5wdXNoKGUpO1xuICAgICAgICAgICAgICBpLnB1c2goZyk7XG4gICAgICAgICAgICAgIGQgPSB0cmF2ZXJzZShmW2ddLCBnLCBmKTtcbiAgICAgICAgICAgICAgaS5wb3AoKTtcbiAgICAgICAgICAgICAgbi5wb3AoKTtcbiAgICAgICAgICAgICAgaWYgKG51bGwgPT0gZCkge1xuICAgICAgICAgICAgICAgIGwgPSAhMDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsID0gbCB8fCBkICE9PSBmW2ddO1xuICAgICAgICAgICAgICAgIG0ucHVzaChkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmID0gbTtcbiAgICAgICAgfSBlbHNlIGlmIChudWxsICE9IGYgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZi5raW5kKSB7XG4gICAgICAgICAgaWYgKHZvaWQgMCAhPT0gKGQgPSB0cmF2ZXJzZShmLCBzLCBlKSkpIHtcbiAgICAgICAgICAgIGwgPSBsIHx8IGYgIT09IGQ7XG4gICAgICAgICAgICBmID0gZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaS5wb3AoKTtcbiAgICAgICAgaWYgKGwpIHtcbiAgICAgICAgICB2W3NdID0gZjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGEpIHtcbiAgICAgICAgbi5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHZhciBwID0gcltlLmtpbmRdICYmIHJbZS5raW5kXS5sZWF2ZSB8fCByLmxlYXZlO1xuICAgICAgdmFyIGggPSBwICYmIHAuY2FsbChyLCBlLCB0LCBhLCBpLCBuKTtcbiAgICAgIGlmIChoID09PSBjKSB7XG4gICAgICAgIHRocm93IGM7XG4gICAgICB9IGVsc2UgaWYgKHZvaWQgMCAhPT0gaCkge1xuICAgICAgICByZXR1cm4gaDtcbiAgICAgIH0gZWxzZSBpZiAodm9pZCAwICE9PSB1KSB7XG4gICAgICAgIHJldHVybiBsID8gdiA6IHU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbCA/IHYgOiBlO1xuICAgICAgfVxuICAgIH0oZSk7XG4gICAgcmV0dXJuIHZvaWQgMCAhPT0gdCAmJiAhMSAhPT0gdCA/IHQgOiBlO1xuICB9IGNhdGNoIChyKSB7XG4gICAgaWYgKHIgIT09IGMpIHtcbiAgICAgIHRocm93IHI7XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcEpvaW4oZSwgciwgbikge1xuICB2YXIgaSA9IFwiXCI7XG4gIGZvciAodmFyIHQgPSAwOyB0IDwgZS5sZW5ndGg7IHQrKykge1xuICAgIGlmICh0KSB7XG4gICAgICBpICs9IHI7XG4gICAgfVxuICAgIGkgKz0gbihlW3RdKTtcbiAgfVxuICByZXR1cm4gaTtcbn1cblxuZnVuY3Rpb24gcHJpbnRTdHJpbmcoZSkge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSk7XG59XG5cbmZ1bmN0aW9uIHByaW50QmxvY2tTdHJpbmcoZSkge1xuICByZXR1cm4gJ1wiXCJcIlxcbicgKyBlLnJlcGxhY2UoL1wiXCJcIi9nLCAnXFxcXFwiXCJcIicpICsgJ1xcblwiXCJcIic7XG59XG5cbnZhciBmID0gXCJcXG5cIjtcblxudmFyIG0gPSB7XG4gIE9wZXJhdGlvbkRlZmluaXRpb24oZSkge1xuICAgIHZhciByID0gZS5vcGVyYXRpb247XG4gICAgaWYgKGUubmFtZSkge1xuICAgICAgciArPSBcIiBcIiArIGUubmFtZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGUudmFyaWFibGVEZWZpbml0aW9ucyAmJiBlLnZhcmlhYmxlRGVmaW5pdGlvbnMubGVuZ3RoKSB7XG4gICAgICBpZiAoIWUubmFtZSkge1xuICAgICAgICByICs9IFwiIFwiO1xuICAgICAgfVxuICAgICAgciArPSBcIihcIiArIG1hcEpvaW4oZS52YXJpYWJsZURlZmluaXRpb25zLCBcIiwgXCIsIG0uVmFyaWFibGVEZWZpbml0aW9uKSArIFwiKVwiO1xuICAgIH1cbiAgICBpZiAoZS5kaXJlY3RpdmVzICYmIGUuZGlyZWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgIHIgKz0gXCIgXCIgKyBtYXBKb2luKGUuZGlyZWN0aXZlcywgXCIgXCIsIG0uRGlyZWN0aXZlKTtcbiAgICB9XG4gICAgcmV0dXJuIFwicXVlcnlcIiAhPT0gciA/IHIgKyBcIiBcIiArIG0uU2VsZWN0aW9uU2V0KGUuc2VsZWN0aW9uU2V0KSA6IG0uU2VsZWN0aW9uU2V0KGUuc2VsZWN0aW9uU2V0KTtcbiAgfSxcbiAgVmFyaWFibGVEZWZpbml0aW9uKGUpIHtcbiAgICB2YXIgciA9IG0uVmFyaWFibGUoZS52YXJpYWJsZSkgKyBcIjogXCIgKyBfcHJpbnQoZS50eXBlKTtcbiAgICBpZiAoZS5kZWZhdWx0VmFsdWUpIHtcbiAgICAgIHIgKz0gXCIgPSBcIiArIF9wcmludChlLmRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuICAgIGlmIChlLmRpcmVjdGl2ZXMgJiYgZS5kaXJlY3RpdmVzLmxlbmd0aCkge1xuICAgICAgciArPSBcIiBcIiArIG1hcEpvaW4oZS5kaXJlY3RpdmVzLCBcIiBcIiwgbS5EaXJlY3RpdmUpO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfSxcbiAgRmllbGQoZSkge1xuICAgIHZhciByID0gZS5hbGlhcyA/IGUuYWxpYXMudmFsdWUgKyBcIjogXCIgKyBlLm5hbWUudmFsdWUgOiBlLm5hbWUudmFsdWU7XG4gICAgaWYgKGUuYXJndW1lbnRzICYmIGUuYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIG4gPSBtYXBKb2luKGUuYXJndW1lbnRzLCBcIiwgXCIsIG0uQXJndW1lbnQpO1xuICAgICAgaWYgKHIubGVuZ3RoICsgbi5sZW5ndGggKyAyID4gODApIHtcbiAgICAgICAgciArPSBcIihcIiArIChmICs9IFwiICBcIikgKyBtYXBKb2luKGUuYXJndW1lbnRzLCBmLCBtLkFyZ3VtZW50KSArIChmID0gZi5zbGljZSgwLCAtMikpICsgXCIpXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IFwiKFwiICsgbiArIFwiKVwiO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZS5kaXJlY3RpdmVzICYmIGUuZGlyZWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgIHIgKz0gXCIgXCIgKyBtYXBKb2luKGUuZGlyZWN0aXZlcywgXCIgXCIsIG0uRGlyZWN0aXZlKTtcbiAgICB9XG4gICAgaWYgKGUuc2VsZWN0aW9uU2V0KSB7XG4gICAgICByICs9IFwiIFwiICsgbS5TZWxlY3Rpb25TZXQoZS5zZWxlY3Rpb25TZXQpO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfSxcbiAgU3RyaW5nVmFsdWUoZSkge1xuICAgIGlmIChlLmJsb2NrKSB7XG4gICAgICByZXR1cm4gcHJpbnRCbG9ja1N0cmluZyhlLnZhbHVlKS5yZXBsYWNlKC9cXG4vZywgZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwcmludFN0cmluZyhlLnZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIEJvb2xlYW5WYWx1ZTogZSA9PiBcIlwiICsgZS52YWx1ZSxcbiAgTnVsbFZhbHVlOiBlID0+IFwibnVsbFwiLFxuICBJbnRWYWx1ZTogZSA9PiBlLnZhbHVlLFxuICBGbG9hdFZhbHVlOiBlID0+IGUudmFsdWUsXG4gIEVudW1WYWx1ZTogZSA9PiBlLnZhbHVlLFxuICBOYW1lOiBlID0+IGUudmFsdWUsXG4gIFZhcmlhYmxlOiBlID0+IFwiJFwiICsgZS5uYW1lLnZhbHVlLFxuICBMaXN0VmFsdWU6IGUgPT4gXCJbXCIgKyBtYXBKb2luKGUudmFsdWVzLCBcIiwgXCIsIF9wcmludCkgKyBcIl1cIixcbiAgT2JqZWN0VmFsdWU6IGUgPT4gXCJ7XCIgKyBtYXBKb2luKGUuZmllbGRzLCBcIiwgXCIsIG0uT2JqZWN0RmllbGQpICsgXCJ9XCIsXG4gIE9iamVjdEZpZWxkOiBlID0+IGUubmFtZS52YWx1ZSArIFwiOiBcIiArIF9wcmludChlLnZhbHVlKSxcbiAgRG9jdW1lbnQoZSkge1xuICAgIGlmICghZS5kZWZpbml0aW9ucyB8fCAhZS5kZWZpbml0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gbWFwSm9pbihlLmRlZmluaXRpb25zLCBcIlxcblxcblwiLCBfcHJpbnQpO1xuICB9LFxuICBTZWxlY3Rpb25TZXQ6IGUgPT4gXCJ7XCIgKyAoZiArPSBcIiAgXCIpICsgbWFwSm9pbihlLnNlbGVjdGlvbnMsIGYsIF9wcmludCkgKyAoZiA9IGYuc2xpY2UoMCwgLTIpKSArIFwifVwiLFxuICBBcmd1bWVudDogZSA9PiBlLm5hbWUudmFsdWUgKyBcIjogXCIgKyBfcHJpbnQoZS52YWx1ZSksXG4gIEZyYWdtZW50U3ByZWFkKGUpIHtcbiAgICB2YXIgciA9IFwiLi4uXCIgKyBlLm5hbWUudmFsdWU7XG4gICAgaWYgKGUuZGlyZWN0aXZlcyAmJiBlLmRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICByICs9IFwiIFwiICsgbWFwSm9pbihlLmRpcmVjdGl2ZXMsIFwiIFwiLCBtLkRpcmVjdGl2ZSk7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9LFxuICBJbmxpbmVGcmFnbWVudChlKSB7XG4gICAgdmFyIHIgPSBcIi4uLlwiO1xuICAgIGlmIChlLnR5cGVDb25kaXRpb24pIHtcbiAgICAgIHIgKz0gXCIgb24gXCIgKyBlLnR5cGVDb25kaXRpb24ubmFtZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGUuZGlyZWN0aXZlcyAmJiBlLmRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICByICs9IFwiIFwiICsgbWFwSm9pbihlLmRpcmVjdGl2ZXMsIFwiIFwiLCBtLkRpcmVjdGl2ZSk7XG4gICAgfVxuICAgIHJldHVybiByICs9IFwiIFwiICsgbS5TZWxlY3Rpb25TZXQoZS5zZWxlY3Rpb25TZXQpO1xuICB9LFxuICBGcmFnbWVudERlZmluaXRpb24oZSkge1xuICAgIHZhciByID0gXCJmcmFnbWVudCBcIiArIGUubmFtZS52YWx1ZTtcbiAgICByICs9IFwiIG9uIFwiICsgZS50eXBlQ29uZGl0aW9uLm5hbWUudmFsdWU7XG4gICAgaWYgKGUuZGlyZWN0aXZlcyAmJiBlLmRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICByICs9IFwiIFwiICsgbWFwSm9pbihlLmRpcmVjdGl2ZXMsIFwiIFwiLCBtLkRpcmVjdGl2ZSk7XG4gICAgfVxuICAgIHJldHVybiByICsgXCIgXCIgKyBtLlNlbGVjdGlvblNldChlLnNlbGVjdGlvblNldCk7XG4gIH0sXG4gIERpcmVjdGl2ZShlKSB7XG4gICAgdmFyIHIgPSBcIkBcIiArIGUubmFtZS52YWx1ZTtcbiAgICBpZiAoZS5hcmd1bWVudHMgJiYgZS5hcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByICs9IFwiKFwiICsgbWFwSm9pbihlLmFyZ3VtZW50cywgXCIsIFwiLCBtLkFyZ3VtZW50KSArIFwiKVwiO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfSxcbiAgTmFtZWRUeXBlOiBlID0+IGUubmFtZS52YWx1ZSxcbiAgTGlzdFR5cGU6IGUgPT4gXCJbXCIgKyBfcHJpbnQoZS50eXBlKSArIFwiXVwiLFxuICBOb25OdWxsVHlwZTogZSA9PiBfcHJpbnQoZS50eXBlKSArIFwiIVwiXG59O1xuXG52YXIgX3ByaW50ID0gZSA9PiBtW2Uua2luZF0oZSk7XG5cbmZ1bmN0aW9uIHByaW50KGUpIHtcbiAgZiA9IFwiXFxuXCI7XG4gIHJldHVybiBtW2Uua2luZF0gPyBtW2Uua2luZF0oZSkgOiBcIlwiO1xufVxuXG5mdW5jdGlvbiB2YWx1ZUZyb21BU1RVbnR5cGVkKGUsIHIpIHtcbiAgc3dpdGNoIChlLmtpbmQpIHtcbiAgIGNhc2UgXCJOdWxsVmFsdWVcIjpcbiAgICByZXR1cm4gbnVsbDtcblxuICAgY2FzZSBcIkludFZhbHVlXCI6XG4gICAgcmV0dXJuIHBhcnNlSW50KGUudmFsdWUsIDEwKTtcblxuICAgY2FzZSBcIkZsb2F0VmFsdWVcIjpcbiAgICByZXR1cm4gcGFyc2VGbG9hdChlLnZhbHVlKTtcblxuICAgY2FzZSBcIlN0cmluZ1ZhbHVlXCI6XG4gICBjYXNlIFwiRW51bVZhbHVlXCI6XG4gICBjYXNlIFwiQm9vbGVhblZhbHVlXCI6XG4gICAgcmV0dXJuIGUudmFsdWU7XG5cbiAgIGNhc2UgXCJMaXN0VmFsdWVcIjpcbiAgICB2YXIgbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCB0ID0gZS52YWx1ZXMubGVuZ3RoOyBpIDwgdDsgaSsrKSB7XG4gICAgICBuLnB1c2godmFsdWVGcm9tQVNUVW50eXBlZChlLnZhbHVlc1tpXSwgcikpO1xuICAgIH1cbiAgICByZXR1cm4gbjtcblxuICAgY2FzZSBcIk9iamVjdFZhbHVlXCI6XG4gICAgdmFyIGEgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAodmFyIGwgPSAwLCBvID0gZS5maWVsZHMubGVuZ3RoOyBsIDwgbzsgbCsrKSB7XG4gICAgICB2YXIgdSA9IGUuZmllbGRzW2xdO1xuICAgICAgYVt1Lm5hbWUudmFsdWVdID0gdmFsdWVGcm9tQVNUVW50eXBlZCh1LnZhbHVlLCByKTtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG5cbiAgIGNhc2UgXCJWYXJpYWJsZVwiOlxuICAgIHJldHVybiByICYmIHJbZS5uYW1lLnZhbHVlXTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWx1ZUZyb21UeXBlTm9kZShlLCByLCBuKSB7XG4gIGlmIChcIlZhcmlhYmxlXCIgPT09IGUua2luZCkge1xuICAgIHJldHVybiBuID8gdmFsdWVGcm9tVHlwZU5vZGUobltlLm5hbWUudmFsdWVdLCByLCBuKSA6IHZvaWQgMDtcbiAgfSBlbHNlIGlmIChcIk5vbk51bGxUeXBlXCIgPT09IHIua2luZCkge1xuICAgIHJldHVybiBcIk51bGxWYWx1ZVwiICE9PSBlLmtpbmQgPyB2YWx1ZUZyb21UeXBlTm9kZShlLCByLCBuKSA6IHZvaWQgMDtcbiAgfSBlbHNlIGlmIChcIk51bGxWYWx1ZVwiID09PSBlLmtpbmQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIGlmIChcIkxpc3RUeXBlXCIgPT09IHIua2luZCkge1xuICAgIGlmIChcIkxpc3RWYWx1ZVwiID09PSBlLmtpbmQpIHtcbiAgICAgIHZhciBpID0gW107XG4gICAgICBmb3IgKHZhciB0ID0gMCwgYSA9IGUudmFsdWVzLmxlbmd0aDsgdCA8IGE7IHQrKykge1xuICAgICAgICB2YXIgbCA9IHZhbHVlRnJvbVR5cGVOb2RlKGUudmFsdWVzW3RdLCByLnR5cGUsIG4pO1xuICAgICAgICBpZiAodm9pZCAwID09PSBsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGkucHVzaChsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9IGVsc2UgaWYgKFwiTmFtZWRUeXBlXCIgPT09IHIua2luZCkge1xuICAgIHN3aXRjaCAoci5uYW1lLnZhbHVlKSB7XG4gICAgIGNhc2UgXCJJbnRcIjpcbiAgICAgY2FzZSBcIkZsb2F0XCI6XG4gICAgIGNhc2UgXCJTdHJpbmdcIjpcbiAgICAgY2FzZSBcIkJvb2xcIjpcbiAgICAgIHJldHVybiByLm5hbWUudmFsdWUgKyBcIlZhbHVlXCIgPT09IGUua2luZCA/IHZhbHVlRnJvbUFTVFVudHlwZWQoZSwgbikgOiB2b2lkIDA7XG5cbiAgICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB2YWx1ZUZyb21BU1RVbnR5cGVkKGUsIG4pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NlbGVjdGlvbk5vZGUoZSkge1xuICByZXR1cm4gXCJGaWVsZFwiID09PSBlLmtpbmQgfHwgXCJGcmFnbWVudFNwcmVhZFwiID09PSBlLmtpbmQgfHwgXCJJbmxpbmVGcmFnbWVudFwiID09PSBlLmtpbmQ7XG59XG5cbmZ1bmN0aW9uIFNvdXJjZShlLCByLCBuKSB7XG4gIHJldHVybiB7XG4gICAgYm9keTogZSxcbiAgICBuYW1lOiByLFxuICAgIGxvY2F0aW9uT2Zmc2V0OiBuIHx8IHtcbiAgICAgIGxpbmU6IDEsXG4gICAgICBjb2x1bW46IDFcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCB7IGMgYXMgQlJFQUssIEdyYXBoUUxFcnJvciwgZSBhcyBLaW5kLCByIGFzIE9wZXJhdGlvblR5cGVOb2RlLCBTb3VyY2UsIGlzU2VsZWN0aW9uTm9kZSwgcGFyc2UsIHBhcnNlVHlwZSwgcGFyc2VWYWx1ZSwgcHJpbnQsIHByaW50QmxvY2tTdHJpbmcsIHByaW50U3RyaW5nLCB2YWx1ZUZyb21BU1RVbnR5cGVkLCB2YWx1ZUZyb21UeXBlTm9kZSwgdmlzaXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYXBocWwud2ViLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs\n");

/***/ })

};
;